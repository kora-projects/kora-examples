openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: vet
    description: Everything about your Vets
    externalDocs:
      description: Find out more
      url: https://swagger.io
paths:
  /v3/pets:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        required: true
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetCreateTO'
      responses:
        '200':
          description: Invalid parameters supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetTO'
        '400':
          description: Invalid parameters supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '408':
          description: Timeout exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
  /v3/pets/{id}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetTO'
        '400':
          description: Invalid parameters supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '408':
          description: Timeout exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      parameters:
        - name: id
          in: path
          description: Pet id to update
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdateTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetTO'
        '400':
          description: Invalid parameters supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '408':
          description: Timeout exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '400':
          description: Invalid parameters supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '408':
          description: Timeout exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'

############ VETS #############

  /vets:
    get:
      tags:
        - vet
      operationId: listVets
      summary: Lists vets
      description: Returns an array of vets
      responses:
        200:
          description: Vets found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetTO'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
    post:
      tags:
        - vet
      operationId: addVet
      summary: Create a Vet
      description: Creates a vet
      requestBody:
        description: The vet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VetCreateTO'
        required: true
      responses:
        200:
          description: Vet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VetTO'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
  /vets/{vetId}:
    get:
      tags:
        - vet
      operationId: getVetById
      summary: Get a vet by ID
      description: Returns the vet or a 404 error
      parameters:
        - name: vetId
          in: path
          description: The ID of the vet
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        200:
          description: Vet details found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VetTO'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        404:
          description: Vet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
    put:
      tags:
        - vet
      operationId: updateVet
      summary: Update a vet  by ID
      description: Returns the vet or a 404 error
      parameters:
        - name: vetId
          in: path
          description: The ID of the vet
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      requestBody:
        description: The vet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VetUpdateTO'
        required: true
      responses:
        200:
          description: Pet type details found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VetTO'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        404:
          description: Vet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
    delete:
      tags:
        - vet
      operationId: deleteVet
      summary: Delete a vet by ID
      description: Returns the vet or a 404 error
      parameters:
        - name: vetId
          in: path
          description: The ID of the vet
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        404:
          description: Vet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTO'

components:
  schemas:
    MessageTO:
      type: object
      properties:
        message:
          type: string
    CategoryTO:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    CategoryCreateTO:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Dogs
    PetStatusTO:
      properties:
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    PetTO:
      allOf:
        - $ref: '#/components/schemas/PetStatusTO'
        - type: object
          required:
            - id
            - name
          properties:
            id:
              type: integer
              format: int64
              minimum: 1
              example: 1
              nullable: false
            name:
              type: string
              example: doggie
              nullable: false
              minLength: 1
              maxLength: 50
            category:
              $ref: '#/components/schemas/CategoryTO'
    PetCreateTO:
      required:
        - name
        - category
      type: object
      properties:
        name:
          type: string
          example: doggie
          nullable: false
          minLength: 1
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryCreateTO'
    PetUpdateTO:
      allOf:
        - $ref: '#/components/schemas/PetStatusTO'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              example: doggie
              nullable: false
              minLength: 1
              maxLength: 50
            category:
              $ref: '#/components/schemas/CategoryCreateTO'

    VetTO:
      title: Vet
      description: A veterinarian
      type: object
      required:
        - id
        - firstName
        - lastName
      allOf:
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the vet.
              type: integer
              format: int64
              nullable: false
              minimum: 1
              example: 1
              readOnly: true
        - $ref: '#/components/schemas/VetFieldTO'
    VetCreateTO:
      title: Vet
      description: A veterinarian create object
      type: object
      required:
        - firstName
        - lastName
      allOf:
        - $ref: '#/components/schemas/VetFieldTO'
    VetUpdateTO:
      title: Vet
      description: A veterinarian update object
      type: object
      required:
        - firstName
        - lastName
      allOf:
        - $ref: '#/components/schemas/VetFieldTO'
    VetFieldTO:
      title: VetFields
      description: Editable fields of a veterinarian
      type: object
      properties:
        firstName:
          title: First name
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: 'Pavel'
        lastName:
          title: Last name
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: 'Chekov'
      required:
        - firstName
        - lastName
