plugins {
    id "java"
    id "jacoco"
    id "application"

    id "com.github.johnrengelman.shadow" version "8.1.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

mainClassName = "ru.tinkoff.kora.example.kafka.Application"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    koraBom
    implementation.extendsFrom(koraBom)
    annotationProcessor.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:kafka"
    implementation "ru.tinkoff.kora:json-module"

    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"

    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "io.goodforgod:testcontainers-extensions-kafka:0.9.7-SNAPSHOT"
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "KAFKA_BOOTSTRAP": "$kafkaBootstrapServers"
    ])
}

test {
    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

jar.enabled = false
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": koraVersion
    }
}


artifacts {
    archives shadowJar
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = true
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}