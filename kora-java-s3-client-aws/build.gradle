plugins {
    id "java"
    id "jacoco"
    id "application"
}

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom); compileOnly.extendsFrom(koraBom); implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom); testImplementation.extendsFrom(koraBom); testAnnotationProcessor.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora.experimental:s3-client-aws"
    implementation "ru.tinkoff.kora:http-client-async"
    implementation "ru.tinkoff.kora:http-client-jdk"

    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"

    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
    testImplementation "org.testcontainers:minio:1.19.8"
    testImplementation "io.goodforgod:testcontainers-extensions-minio:0.12.2"
    testImplementation "ru.tinkoff.kora:test-junit5"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    applicationName = "application"
    mainClass = "ru.tinkoff.kora.example.s3.aws.Application"
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "S3_URL"       : "$s3Url",
            "S3_BUCKET"    : "$s3Bucket",
            "S3_ACCESS_KEY": "$s3AccessKey",
            "S3_SECRET_KEY": "$s3SecretKey",
    ])
}

distTar {
    archiveFileName = "application.tar"
}

test {
    dependsOn tasks.distTar

    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    exclude("**/\$*")

    jacoco {
        excludes += ["**/generated/**", "**/Application*", "**/\$*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
    classDirectories = files(classDirectories.files.collect { fileTree(dir: it, excludes: test.jacoco.excludes) })
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}