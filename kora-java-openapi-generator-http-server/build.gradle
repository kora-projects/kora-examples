import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath("ru.tinkoff.kora:openapi-generator:$koraVersion")
    }
}

plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.openapi.generator" version "7.14.0"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(24)

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
    testImplementation.extendsFrom(koraBom)
    testAnnotationProcessor.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:validation-module"
    implementation "ru.tinkoff.kora:http-server-undertow"
    implementation "ru.tinkoff.kora:json-module"
    implementation "io.projectreactor:reactor-core:3.6.18" // For reactive examples (optional)

    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"

    testImplementation "org.json:json:20231013"
    testImplementation "org.skyscreamer:jsonassert:1.5.1"
    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
}

application {
    applicationName = "application"
    mainClassName = "ru.tinkoff.kora.example.openapi.http.server.Application"
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "": ""
    ])
}

// OpenAPI for V2
def openApiGeneratePetV2 = tasks.register("openApiGeneratePetV2", GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/petstoreV2.yaml"
    outputDir = "$buildDir/generated/openapi"
    def corePackage = "ru.tinkoff.kora.example.openapi.petV2"
    apiPackage = "${corePackage}.api"
    modelPackage = "${corePackage}.model"
    invokerPackage = "${corePackage}.invoker"
    configOptions = [
            mode                  : "java-server", // так же есть reactive_server вариация HTTP Server'а
            enableServerValidation: "true",
    ]
}
sourceSets.main { java.srcDirs += openApiGeneratePetV2.get().outputDir }
compileJava.dependsOn openApiGeneratePetV2


// Additional OpenAPI Generator for V3
def openApiGeneratePetV3 = tasks.register("openApiGeneratePetV3", GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/petstoreV3.yaml"
    outputDir = "$buildDir/generated/openapi"
    def corePackage = "ru.tinkoff.kora.example.openapi.petV3"
    apiPackage = "${corePackage}.api"
    modelPackage = "${corePackage}.model"
    invokerPackage = "${corePackage}.invoker"
    configOptions = [
            mode                  : "java-reactive-server", // так же есть java-server вариация HTTP Server'а
            enableServerValidation: "true",
    ]
}
sourceSets.main { java.srcDirs += openApiGeneratePetV3.get().outputDir }
compileJava.dependsOn openApiGeneratePetV3

distTar {
    archiveFileName = "application.tar"
}

test {
    dependsOn tasks.distTar

    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/generated/**", "**/Application*", "**/\$*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/openapi"
    }
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn tasks.jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect { fileTree(dir: it, excludes: test.jacoco.excludes) })
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}