import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath("ru.tinkoff.kora:openapi-generator:$koraVersion")
    }
}

plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.openapi.generator" version "7.4.0"
}

applicationName = "application"
mainClassName = "ru.tinkoff.kora.example.openapi.http.client.Application"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:validation-module"
    implementation "ru.tinkoff.kora:http-client-jdk"
    implementation "ru.tinkoff.kora:json-module"
    implementation "io.projectreactor:reactor-core:3.6.5" // For reactive examples (optional)

    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"

    testImplementation "org.json:json:20231013"
    testImplementation "org.skyscreamer:jsonassert:1.5.1"
    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "io.goodforgod:testcontainers-extensions-mockserver:0.12.0"
}

// OpeAPI for V2
openApiGenerate {
    generatorName = "kora"
    inputSpec = "$projectDir/src/main/resources/openapi/petstoreV2.yaml"
    outputDir = "$buildDir/generated/openapi"
    apiPackage = "ru.tinkoff.kora.example.openapi.petV2.api"
    modelPackage = "ru.tinkoff.kora.example.openapi.petV2.model"
    invokerPackage = "ru.tinkoff.kora.example.openapi.petV2.invoker"
    configOptions = [
            mode                         : "java-client",
            clientConfigPrefix           : "httpClient.petV2",
            additionalContractAnnotations: """{ "*" : [ {"annotation": "@ru.tinkoff.kora.metrics.sage.module.annotation.SageMetric"} ] }""",
    ]
}

// Additional OpenAPI Generator for V3
tasks.register('openApiGeneratePetV3', GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/petstoreV3.yaml"
    outputDir = "$buildDir/generated/openapi"
    apiPackage = "ru.tinkoff.kora.example.openapi.petV3.api"
    modelPackage = "ru.tinkoff.kora.example.openapi.petV3.model"
    invokerPackage = "ru.tinkoff.kora.example.openapi.petV3.invoker"
    configOptions = [
            mode                : "java-reactive-client",
            clientConfigPrefix  : "httpClient.petV3",
            securityConfigPrefix: "openapiAuth",
            primaryAuth         : "apiKeyAuth",
    ]
}

compileJava.dependsOn tasks.openApiGenerate
compileJava.dependsOn tasks.openApiGeneratePetV3

application {
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "HTTP_CLIENT_PET_V2_URL": "$httpClientUrlPetV2",
            "HTTP_CLIENT_PET_V3_URL": "$httpClientUrlPetV3",
    ])
}

test {
    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/openapi"
    }
}

distTar {
    archiveFileName = "application.tar"
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn tasks.jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}